AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for www.eladheller.com static website'

Parameters:
  DomainName:
    Type: String
    Default: eladheller.com
    Description: The domain name
  
  WebsiteSubDomain:
    Type: String
    Default: www
    Description: The subdomain for the website
    
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: The ID of the existing Route53 hosted zone

Resources:
  # S3 bucket for website hosting
  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${WebsiteSubDomain}.${DomainName}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  # Bucket policy to allow CloudFront access
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}'
            Action: s3:GetObject
            Resource: !Sub '${WebsiteBucket.Arn}/*'

  # Root domain S3 bucket for redirect
  RootDomainBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref DomainName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Bucket policy for root domain bucket
  RootDomainBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref RootDomainBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${RootDomainCloudFrontOAI}'
            Action: s3:GetObject
            Resource: !Sub '${RootDomainBucket.Arn}/*'

  # SSL Certificate for both domains
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub '${WebsiteSubDomain}.${DomainName}'
      SubjectAlternativeNames:
        - !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub '${WebsiteSubDomain}.${DomainName}'
          HostedZoneId: !Ref HostedZoneId
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  # CloudFront distribution for www subdomain
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub '${WebsiteSubDomain}.${DomainName}'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

  # CloudFront distribution for root domain (redirect)
  RootDomainCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          DefaultTTL: 86400
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          TargetOriginId: RootS3Origin
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RedirectFunction.FunctionARN
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - DomainName: !GetAtt RootDomainBucket.RegionalDomainName
            Id: RootS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${RootDomainCloudFrontOAI}'
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only

  # Response Headers Policy for redirecting to www
  RedirectHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub "${DomainName}-redirect-to-www"
        CustomHeadersConfig:
          Items:
            - Header: Location
              Value: !Sub "https://${WebsiteSubDomain}.${DomainName}/"
              Override: true
        Comment: "Redirect to www domain"

  # CloudFront Origin Access Identity for main site
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${WebsiteSubDomain}.${DomainName}'

  # CloudFront Origin Access Identity for root domain
  RootDomainCloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront OAI for ${DomainName}'

  # Route 53 record for website
  WebsiteDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${WebsiteSubDomain}.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # This is CloudFront's fixed global hosted zone ID for alias records

  # Root domain DNS record
  RootDomainDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt RootDomainCloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID

  # Add IPv6 support for the website
  WebsiteDNSRecordIPv6:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub '${WebsiteSubDomain}.${DomainName}'
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 

  # Add IPv6 support for the root domain
  RootDomainDNSRecordIPv6:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt RootDomainCloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 

  # Function for URL rewriting
  RedirectFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: RedirectToWww
      AutoPublish: true
      FunctionConfig:
        Comment: "Redirect apex domain to www subdomain"
        Runtime: cloudfront-js-1.0
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var headers = request.headers;
          var host = headers.host.value;
          var uri = request.uri;
          
          // Check if this is the apex domain (eladheller.com)
          if (host === 'eladheller.com') {
            // Preserve the path and querystring parameters
            var redirectUrl = 'https://www.eladheller.com' + uri;
            
            if (request.querystring) {
              var params = request.querystring;
              var queryParams = [];
              
              for (var param in params) {
                if (params[param].value === '') {
                  queryParams.push(param);
                } else {
                  queryParams.push(param + '=' + params[param].value);
                }
              }
              
              if (queryParams.length > 0) {
                redirectUrl += '?' + queryParams.join('&');
              }
            }
            
            return {
              statusCode: 301,
              statusDescription: 'Moved Permanently',
              headers: {
                'location': { value: redirectUrl },
                'cache-control': { value: 'max-age=3600' }
              }
            };
          }
          
          return request;
        }

Outputs:
  WebsiteURL:
    Description: Website URL
    Value: !Sub 'https://${WebsiteSubDomain}.${DomainName}'
  
  CloudFrontDomainName:
    Description: CloudFront Domain Name
    Value: !GetAtt CloudFrontDistribution.DomainName
  
  BucketName:
    Description: S3 Bucket Name
    Value: !Ref WebsiteBucket
  
  CloudFrontDistributionId:
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution